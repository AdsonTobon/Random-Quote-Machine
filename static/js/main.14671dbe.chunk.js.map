{"version":3,"sources":["components/Quote.jsx","components/Author.jsx","components/ButtonRedes.jsx","components/ButtonNewQuote.jsx","components/DetalleApp.jsx","serviceWorker.js","index.js"],"names":["Quote","props","Cita","id","Author","Autor","ButtonRedes","className","href","target","rel","type","ButtonNewQuote","onClick","click","DetalleApp","GenerateRandomQuote","setState","vec","state","quote","citas","autor","author","fetch","then","response","json","data","quotes","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uNAaeA,EAXD,SAACC,GAAS,IAEfC,EAAMD,EAANC,KACD,OACI,yBAAKC,GAAG,QACJD,ICMDE,EAXF,SAACH,GAAU,IAEfI,EAAQJ,EAARI,MACD,OACI,yBAAKF,GAAG,UAAR,MACKE,EADL,QCUGC,EAdI,WAGX,OACI,yBAAKC,UAAU,iBACb,uBAAGJ,GAAG,cAAcK,KAAK,mCAAmCC,OAAO,SAASC,IAAI,uBAC9E,4BAAQC,KAAK,SAASR,GAAG,kBAAzB,cCKAS,EAXO,SAACX,GAGhB,OACI,yBAAKM,UAAU,oBACb,4BAAQJ,GAAG,YAAYU,QAASZ,EAAMa,OAAtC,eCDOC,E,kDACnB,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAyBRe,oBAAoB,WAClB,EAAKC,SAAS,CACZC,IAAI,EAAKC,MAAMD,IAAI,EACnBE,MAAO,EAAKD,MAAME,MAAM,EAAKF,MAAMD,KAAKE,MACxCE,MAAO,EAAKH,MAAME,MAAM,EAAKF,MAAMD,KAAKK,UA5B1C,EAAKJ,MAAQ,CACTE,MAAM,GACND,MAAM,GACNE,MAAM,GACNJ,IAAI,GANS,E,gEAYD,IAAD,OACjBM,MAAM,0IACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKX,SACjB,CACEI,MAAOO,EAAKC,OACZT,MAAMQ,EAAKC,OAAO,GAAGT,MACrBE,MAAMM,EAAKC,OAAO,GAAGN,c,+BAkBvB,OACE,6BAAShB,UAAU,WACjB,yBAAKJ,GAAG,YAAYI,UAAU,wBAC5B,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAOL,KAAM4B,KAAKX,MAAMC,QACxB,kBAAC,EAAD,CAAQf,MAAOyB,KAAKX,MAAMG,SAE5B,yBAAKf,UAAU,qBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAgBO,MAAOgB,KAAKd,6B,GA/CAe,aCMpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.14671dbe.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n const Quote =(props)=>{\r\n\r\n    let {Cita}=props\r\n        return (\r\n            <div id=\"text\">\r\n               {Cita}\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Quote;","import React from 'react'\r\n\r\nconst Author=(props)=> {\r\n    \r\n    let {Autor} =props\r\n        return (\r\n            <div id=\"author\">\r\n             ~~ {Autor} ~~\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Author","import React from 'react'\r\n\r\nconst ButtonRedes =()=>{\r\n    \r\n    \r\n        return (\r\n            <div className=\"Botones_redes\">\r\n              <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <button type=\"button\" id=\"button-twitter\">Twitter</button>\r\n              </a>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\n\r\nexport default ButtonRedes;","import React from 'react'\r\n\r\nconst  ButtonNewQuote =(props)=> {\r\n    \r\n    \r\n        return (\r\n            <div className=\"Botones_Newquote\">\r\n              <button id=\"new-quote\" onClick={props.click}>New quote</button>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default  ButtonNewQuote","import React, { Component } from \"react\";\r\nimport Quote from './Quote';\r\nimport Author from './Author';\r\nimport ButtonRedes from './ButtonRedes';\r\nimport ButtonNewQuote from './ButtonNewQuote';\r\n\r\nexport default class DetalleApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        citas:[],\r\n        quote:\"\",\r\n        autor:\"\",\r\n        vec:0\r\n        \r\n    }\r\n  }\r\n\r\n\r\ncomponentDidMount(){\r\n  fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\r\n  .then(response => response.json())\r\n  .then(data => this.setState(\r\n    {\r\n      citas: data.quotes,\r\n      quote:data.quotes[0].quote,\r\n      autor:data.quotes[0].author,\r\n      \r\n    \r\n    }))\r\n\r\n}\r\n\r\n  GenerateRandomQuote=()=>{\r\n    this.setState({\r\n      vec:this.state.vec+1,\r\n      quote: this.state.citas[this.state.vec].quote,\r\n      autor: this.state.citas[this.state.vec].author\r\n    })\r\n  }\r\n\r\n  render() {\r\n       \r\n      \r\n    return (\r\n      <section className=\"Section\">\r\n        <div id=\"quote-box\" className=\"Contenedor_Principal\">\r\n          <div className=\"Principal_Citas\">\r\n            <Quote Cita={this.state.quote}/>\r\n            <Author Autor={this.state.autor}/>\r\n          </div>\r\n          <div className=\"Principal_Botones\">\r\n            <ButtonRedes/>\r\n            <ButtonNewQuote click={this.GenerateRandomQuote}/>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      \r\n    );\r\n  }\r\n\r\n  \r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css'\nimport './index.css';\nimport  DetalleApp from './components/DetalleApp';\n\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <DetalleApp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}